#include <iostream>
#include <algorithm>

//埃氏筛法
//时间复杂度为nloglogn，可以看做n

using namespace std;

const int N  = 1000000;
bool st[N];
int n;

int get_primes(int n)
{
    int cnt = 0;
    for(int i = 2;i <= n;i ++)
    {
        //判断i是不是质数
        if(!st[i])
        {
            cnt ++ ;

            //将质数的倍数全部筛掉！
            for(int j = i + i;j <= n;j += i) st[j] = true;
        }
    }
    return cnt;
}

int main()
{
    cin >> n;
    cout << get_primes(n) << endl;

    return 0;
}

......................
#include <iostream>
#include <algorithm>

//线性筛法
//时间复杂度为n！

using namespace std;

const int N  = 1e6 + 10;
bool st[N];
int primes[N],cnt;


int get_primes(int n)
{
    int cnt = 0;
    for(int i = 2;i <= n;i ++)
    {
        if(!st[i]) primes[cnt ++] = i;


        for(int j = 0;primes[j] <= n / i;j ++)
        {

            //将已经存在数组中的质数的倍数全部筛去
            st[primes[j] * i] = true;

            //如果i是数组中已经存放的质数的倍数，说明其已经被筛掉了，所以直接break当前循环（因为它的质因数的倍数一定有当前的i）
            if(i % primes[j] == 0) break;

        }
    }
    return cnt;
}

int main()
{
    int n;
    cin >> n;
    cout << get_primes(n) << endl;

    return 0;
}

